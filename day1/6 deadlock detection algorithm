#include <stdio.h>
#define N 3

void check_deadlock(int need[N][N], int alloc[N][N], int avail[N]);

int main()
{
    int max[N][N], alloc[N][N], need[N][N], avail[N], i, j;
    
    printf("Enter the maximum matrix:\n");
    for(i=0; i<N*N; i++)
        scanf("%d", &max[i/N][i%N]);
            
    printf("Enter the allocation matrix:\n");
    for(i=0; i<N*N; i++)
        scanf("%d", &alloc[i/N][i%N]);
            
    printf("Enter the available resources:\n");
    for(i=0; i<N; i++)
        scanf("%d", &avail[i]);
            for(i=0; i<N; i++)
        for(j=0; j<N; j++)
            need[i][j] = max[i][j] - alloc[i][j];
    
    check_deadlock(need, alloc, avail);
    
    return 0;
}

void check_deadlock(int need[N][N], int alloc[N][N], int avail[N])
{
    int i, j, k, finish[N], deadlocked[N], count=0;
    for(i=0; i<N; i++)
        finish[i] = deadlocked[i] = 0;
    for(i=0; i<N; i++)
    {
        if(!finish[i])
        {
            for(j=0; j<N && need[i][j]<=avail[j]; j++);
            
            if(j == N)
            {
                for(k=0; k<N; k++)
                    avail[k] += alloc[i][k];
                finish[i] = 1;
                count++;
                for(k=0; k<N; k++)
                    alloc[i][k] = 0;
            }
        }
    }
    if(count < N)
    {
        printf("The system is in a deadlock state.\n");
        for(i=0; i<N; i++)
            if(!finish[i])
                printf("Process %d is deadlocked.\n", i);
    }
    else
        printf("The system is not in a deadlock state.\n");
}
